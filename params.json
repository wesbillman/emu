{"name":"Emu","body":"EMU\r\n\r\nSimple EMbedded Unit Testing Framework\r\n\r\nQuick Start\r\ninclude \"emu.h\"\r\nAdd a suite\r\nAdd some tests\r\nRun the suite\r\nDisplay the results\r\n\r\n    #include \"emu.h\"\r\n            \r\n    emu_suite* suite = emu_suite_add(\"suite_a\", setup, teardown);\r\n    emu_test_add(suite, \"failing_test\", failing_test);\r\n    emu_suite_run(suite);\r\n    emu_display_details();\r\n\r\nProject specific configuration, if needed.\r\n\r\n    //emu function overrides\r\n    #define emu_malloc(size)                malloc(size)\r\n    #define emu_free(ptr)                   free(ptr)\r\n    #define emu_memset(ptr, value, size)    memset(ptr, value, size)\r\n    #define emu_printf(...)                 printf(__VA_ARGS__)\r\n\r\n    //emu size defines\r\n    #define MAX_TESTS_IN_SUITE      32\r\n    #define MAX_SUITES_IN_REPO      32\r\n    #define MAX_SUITE_NAME_LENGTH   32\r\n\r\nAssert macros\r\n\r\n    //test macros\r\n    #define emu_fail(message)\r\n    #define emu_pass(message)\r\n    #define emu_fail_if(test)\r\n    #define emu_fail_unless(test)}\r\n\r\nEMU framework functions\r\n\r\n    //framework functions\r\n    void emu_all_run(void);\r\n    void emu_display_summary(void);\r\n    void emu_display_details(void);}\r\n\r\nSuite functions\r\n    \r\n    //suite functions\r\n    emu_suite* emu_suite_add(const char* name, emu_setup setup, emu_teardown teardown);\r\n    void emu_suite_delete(emu_suite* suite);\r\n    void emu_suite_run(emu_suite* suite);\r\n    void emu_suite_display_details(emu_suite* suite);\r\n\r\nTest functions\r\n\r\n    //test functions\r\n    emu_test* emu_test_add(emu_suite* suite, const char* name, emu_test_func test);\r\n    void emu_test_delete(emu_test* test);\r\n    void emu_test_run(emu_test* test);\r\n    void emu_test_display_details(emu_test* test);\r\n\r\nThat's all","tagline":"Simple EMbedded Unit testing","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}